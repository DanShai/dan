{"version":3,"sources":["datasource/JobError.js","datasource/JobParser.js","datasource/IDataSource.js","datasource/Mol.js","datasource/Duuni.js","datasource/DataHandler.js","graphql/actionresolvers/IResolver.js","graphql/actionresolvers/jobsResolver.js","pipeapi/PipeError.js","pipeapi/api.js","graphql/resolvers.js","graphql/actionresolvers/pipeResolver.js","apollo/client.js","graphql/typeDefs.js","graphql/queries.js","utils/index.js","components/layout/Toaster.js","components/layout/AddContainer.js","components/jobs/AddAll.js","components/layout/SearchLayout.js","components/layout/ContainerLayout.js","components/pages/MenuPage.js","components/layout/ListLayout.js","components/layout/ItemContainer.js","components/jobs/JobItem.js","components/pages/Page.js","components/pages/Pages.js","components/jobs/Jobs.js","docs/components/layout/DocContainer.js","docs/components/layout/CardContainer.js","docs/components/layout/IconParag.js","docs/goal.js","docs/components/Mermaid.js","docs/components/useMermaid.js","docs/archi.js","docs/Graphs/index.js","docs/design.js","docs/tech.js","docs/seqdiag.js","docs/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["JobError","message","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","name","Error","JobParser","getFromReg","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","akey","adescription","regex","results","wrap","_context","prev","next","regs","get","match","sent","abrupt","stop","_x","_x2","apply","arguments","formatOne","_ref2","_callee2","job","company","contact","otherContact","email","phone","description","address","companyUrl","phones","emails","orgz","info","_context2","objectSpread","_x3","formatJobs","_ref3","_callee3","jobs","fjobs","_context3","length","Promise","all","map","t0","console","log","_x4","Map","IDataSource","url","getJobs","constructor","TypeError","parser","Mol","val","API_URL","JOBS","res","data","dt","response","concat","axios","docs","jobId","ilmoitusnumero","getJob","JOB_ID","city","jobTitle","area","kunta","tehtavanimi","tyonantajanNimi","maakunta","yhteystiedotSahkoposti","tyopaikanOsoite","yhteystiedot","yhteystiedotPuhelin","tyonantajanWwwOsoite","hakemusLahetetaan","kuvausteksti","pages","source","Duuni","token","getPage","pageix","wordtosearch","TOKEN","dunData","dres","toConsumableArray","heading","slug","municipality_name","company_name","descr","area_name","DUUNI_TOKEN","process","DUUNI_API_URL","MOL_API_URL","DataHandler","sources","IResolver","resolve","JobsResolver","Source","dataHandler","getSource","PipeError","PIPE_API","PIPE_TOKEN","PipeApi","findOrg","findResponse","error","isEexist","org_id","id","addOrg","orgData","orgResponse","post","getPersonsFromOrg","getDealsFromOrg","_callee4","_context4","addPerson","_callee5","personData","personResponse","_context5","addDeal","_callee6","dealData","dealResponse","_context6","addNote","_callee7","noteData","noteResponse","_context7","noteError","addActivity","_callee8","activityData","activityResponse","_ref9","success","_context8","pipeResolver","PipeResolver","api","person_id","dataPersons","aperson","dataDealsOfOrg","LEAD","deal_id","dealResp","find","p","includes","substring","defineProperty","title","pop","content","subject","type","jobsResolver","resolvers","Query","_getJobs","_","value","Mutation","addProspect","_addProspect","initApollo","schema","makeExecutableSchema","typeDefs","schemaLink","SchemaLink","cache","InMemoryCache","addTypename","errorLink","onError","graphQLErrors","networkError","operation","forEach","path","operationName","ApolloClient","link","ApolloLink","from","JOBS_QUERY","gql","_templateObject","ADD_ORG","_templateObject2","isExist","obj","_len","keys","Array","_key","undefined","reduce","o","k","showtoaster","duration","toaster","warning","AddContainer","props","react_default","createElement","Pane","marginY","padding","paddingX","display","gridGap","width","border","marginLeft","marginRight","justifyItems","justifyContent","gridTemplateColumns","gridAutoFlow","children","AddAll","_useState","useState","_useState2","slicedToArray","clicked","setClicked","_useState3","_useState4","notice","setNotice","alljobs","useEffect","total","handleAllClick","e","client","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","preventDefault","ix","setTimeout","_ref5","_ref6","onAdd","notico","mutate","mutation","variables","entries","Symbol","iterator","done","t1","return","finish","checked","onSelChange","layout_AddContainer","Alert","intent","height","react_apollo_browser_umd","Button","onClick","appearance","iconBefore","addAll","src_Switch","onChange","Spinner","opacity","SearchLayout","ContainerLayout","MenuPage","prevPage","nextPage","curpage","nbpages","Icon","icon","color","cursor","size","Pill","margin","isSolid","ListLayout","ItemContainer","elevation","float","alignItems","JobItem","msg","layout_ItemContainer","Heading","Text","join","marginTop","addConsumer","Page","currentPageJobs","layout_ListLayout","jobs_JobItem","key","Pages","page","setPage","numPages","setNumPages","jpp","len","r","np","slice","MenuPage_MenuPage","Page_Page","Jobs","setValue","setSource","_useState5","_useState6","jobppage","setJobpPage","_useState7","_useState8","setCheked","_useState9","_useState10","setJobs","_useState11","_useState12","target","vjobs","jobsArray","findIndex","handleClick","query","currJobs","layout_ContainerLayout","layout_SearchLayout","Select","parseInt","TextInput","placeholder","jobsConsumer","addparms","jobs_AddAll","renderAll","Pages_Pages","DocContainer","marginX","gridTemplateRows","textAlign","CardContainer","rowlay","start","Card","IconParag","headcontent","Goal","CardContainer_CardContainer","IconParag_IconParag","DocContainer_DocContainer","Mermaid","svg","setSvg","mermaid","mermaidAPI","initialize","theme","logLevel","flowchart","curve","gantt","axisFormat","sequence","actorMargin","render","svgraph","useMermaid","dangerouslySetInnerHTML","__html","Archi","components_Mermaid","marginReft","Design","Tech","SeqDiag","Docs","goal_Goal","tech_Tech","archi_Archi","seqdiag_SeqDiag","design_Design","AppRouter","BrowserRouter","Link","to","Badge","Switch","Route","exact","component","App","setClient","init","aclient","routes","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f29043ce.chunk.js","sourcesContent":["class JobError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = \"JobError\";\n  }\n}\nexport default JobError;\n","import JobError from \"./JobError\";\n\nexport class JobParser {\n  constructor() {\n    this.regs = new Map([\n      [\"email\", /[a-z0-9-]{1,30}@[a-z0-9-]{1,65}.[a-z]{1,}/gim],\n      [\n        \"phone\",\n        /((([+][\\s]{0,1})|([0]{2}[\\s-]{0,1}))([358]{3})([\\s-]{0,1})|([0]{1}))(([1-9]{1}[0-9]{0,1})([\\s-]{0,1})([0-9]{2,4})([\\s-]{0,1})([0-9]{2,4})([\\s-]{0,1}))([0-9]{0,3}){1}/gm\n      ],\n      [\"url\", /https{0,1}:\\/\\/\\S*/gim]\n    ]);\n  }\n\n  getFromReg = async (akey, adescription) => {\n    const regex = this.regs.get(akey);\n    const results = await adescription.match(regex);\n    return results;\n  };\n\n  formatOne = async job => {\n    let {\n      company,\n      contact,\n      otherContact,\n      email,\n      phone,\n      description,\n      address,\n      companyUrl\n    } = job;\n\n    const phones = await this.getFromReg(\"phone\", description);\n    const emails = await this.getFromReg(\"email\", description);\n\n    company = company || \"Read the Description/Note\";\n    companyUrl = companyUrl || \"Read the Description/Note\";\n    contact = contact || company || \"Read the Description/Note\";\n    address = address || \"Read the Description/Note\";\n    otherContact = otherContact || \"Read the Description/Note\";\n    email = email || emails || [\"Read the Description/Note\"];\n    phone = phone || phones || [\"Read the Description/Note\"];\n    description = description || \"No Description/Note\";\n\n    const orgz = {\n      company,\n      contact,\n      email,\n      phone,\n      address,\n      description,\n      otherContact,\n      companyUrl\n    };\n    const info = { ...job, ...orgz };\n    return info;\n  };\n\n  formatJobs = async jobs => {\n    try {\n      if (!jobs || jobs.length === 0) return null;\n      const fjobs = await Promise.all(jobs.map(this.formatOne));\n      if (!fjobs) throw new JobError(\"fk job error\");\n      return fjobs;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}\n","import { JobParser } from \"./JobParser\";\n\nclass IDataSource {\n  constructor(url, name) {\n    if (new.target === IDataSource) {\n      throw new TypeError(\"watch out bro!\");\n    }\n    this.url = url;\n    this.name = name;\n    this.parser = new JobParser();\n  }\n\n  getJobs = () => {\n    throw new Error(\"implement me bro\");\n  };\n}\n\nexport default IDataSource;\n","import axios from \"axios\";\nimport IDataSource from \"./IDataSource\";\nimport JobError from \"./JobError\";\n\nclass Mol extends IDataSource {\n  getJobs = async val => {\n    const API_URL = this.url;\n    const wordtosearch = val || \"python\";\n    const JOBS = `?hakusana=${wordtosearch}&alueet=Uusimaa&&kentat=ilmoitusnumero&rows=100&start=0&ss=true`;\n    try {\n      const res = await axios.get(`${API_URL}${JOBS}`);\n      const data = await res.data.response.docs;\n      let dt = [];\n      if (!data) throw new JobError(\"Empty bro\");\n      dt = await Promise.all(\n        data.map(({ ilmoitusnumero: jobId }) => this.getJob(jobId))\n      );\n      const response = await this.parser.formatJobs(dt);\n      return response;\n    } catch (error) {\n      console.log(error.message);\n      return [];\n    }\n  };\n\n  getJob = async jobId => {\n    const API_URL = this.url;\n    const JOB_ID = `/${jobId}?kieli=fi`;\n    try {\n      const res = await axios.get(`${API_URL}${JOB_ID}`);\n      const data = await res.data.response.docs[0];\n      if (!data) throw new JobError(\"Empty bro\");\n      let pages = 1;\n\n      const {\n        kunta: city,\n        tehtavanimi: jobTitle,\n        tyonantajanNimi: company,\n        maakunta: area,\n        yhteystiedotSahkoposti: email,\n        tyopaikanOsoite: address,\n        yhteystiedot: contact,\n        yhteystiedotPuhelin: phone,\n        tyonantajanWwwOsoite: companyUrl,\n        hakemusLahetetaan: otherContact,\n        kuvausteksti: description\n      } = data;\n\n      return {\n        jobId,\n        city,\n        jobTitle,\n        company,\n        area,\n        email,\n        address,\n        contact,\n        phone,\n        companyUrl,\n        otherContact,\n        description,\n        pages,\n        source: this.name,\n        message: \"Not Sent Yet\"\n      };\n    } catch (error) {\n      console.log(error.message);\n      return null;\n    }\n  };\n}\n\nexport default Mol;\n","import axios from \"axios\";\nimport IDataSource from \"./IDataSource\";\nimport JobError from \"./JobError\";\n\nclass Duuni extends IDataSource {\n  constructor(url, name, token) {\n    super(url, name);\n    this.token = token;\n  }\n\n  getPage = (val, pageix) => {\n    const wordtosearch = val || \"python\";\n    const TOKEN = this.token;\n    const JOBS = `${TOKEN}/jobentries?search=${wordtosearch}&area=Uusimaa&page=${pageix}&format=json`;\n    return JOBS;\n  };\n  getJobs = async val => {\n    const API_URL = this.url;\n    let pages = 1;\n    let JOBS = this.getPage(val, pages);\n    try {\n      let data = [];\n      let res = await axios.get(`${API_URL}${JOBS}`);\n      let dunData = await res.data;\n      let dres = await dunData.results;\n      data = [...dres];\n      while (dunData.next) {\n        pages += 1;\n        JOBS = this.getPage(val, pages);\n        res = await axios.get(`${API_URL}${JOBS}`);\n        dunData = await res.data;\n        if (dunData) {\n          dres = await dunData.results;\n          data = [...data, ...dres];\n        }\n      }\n      let dt = [];\n      if (!data) throw new JobError(\"Empty bro\");\n\n      dt = data.map(\n        ({\n          heading: jobTitle,\n          slug: jobId,\n          municipality_name: city,\n          company_name: company,\n          descr: description,\n          area_name: area\n        }) => ({\n          jobId,\n          city,\n          jobTitle,\n          company,\n          area,\n          description,\n          pages,\n          email: \"\",\n          address: \"\",\n          contact: \"\",\n          phone: \"\",\n          companyUrl: \"\",\n          otherContact: \"\",\n          source: this.name,\n          message: \"Not Sent Yet\"\n        })\n      );\n      const response = await this.parser.formatJobs(dt);\n      return response;\n    } catch (error) {\n      console.log(error.message);\n      return [];\n    }\n  };\n}\n\nexport default Duuni;\n","import Mol from \"./Mol\";\nimport Duuni from \"./Duuni\";\n\nconst DUUNI_TOKEN = process.env.REACT_APP_DUUNI_TOKEN;\nconst DUUNI_API_URL = process.env.REACT_APP_DUUNI_API_URL;\nconst MOL_API_URL = process.env.REACT_APP_MOL_API_URL;\n\nclass DataHandler {\n  constructor() {\n    this.sources = new Map([\n      [\"mol\", new Mol(MOL_API_URL, \"mol\")],\n      [\"duunitori\", new Duuni(DUUNI_API_URL, \"duunitori\", DUUNI_TOKEN)]\n    ]);\n  }\n\n  async getSource(source) {\n    return this.sources.get(source);\n  }\n}\n\nexport default DataHandler;\n","class IResolver {\n  constructor() {\n    if (new.target === IResolver) {\n      throw new TypeError(\"watch out bro!\");\n    }\n  }\n\n  resolve = (val, source) => {\n    throw new Error(\"implement me bro!\");\n  };\n}\n\nexport default IResolver;\n","import DataHandler from \"../../datasource/DataHandler\";\nimport IResolver from \"./IResolver\";\n\nclass JobsResolver extends IResolver {\n  constructor() {\n    super();\n    this.dataHandler = new DataHandler();\n  }\n\n  resolve = async (val, source) => {\n    //source = `${source}.fi`;\n    let response = null;\n    const Source = await this.dataHandler.getSource(source);\n    try {\n      response = await Source.getJobs(val);\n    } catch (e) {\n      console.log(e.message);\n    }\n\n    return response;\n  };\n}\n\nexport default JobsResolver;\n","class PipeError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = \"PipeError\";\n  }\n}\nexport default PipeError;\n","import axios from \"axios\";\nimport PipeError from \"./PipeError\";\n\nconst PIPE_API = process.env.REACT_APP_PIPE_API;\nconst PIPE_TOKEN = process.env.REACT_APP_PIPE_TOKEN;\n\nclass PipeApi {\n  findOrg = async company => {\n    try {\n      const findResponse = await axios.get(\n        `${PIPE_API}/organizations/find?term=${company}&api_token=${PIPE_TOKEN}`\n      );\n      const { data } = findResponse.data;\n      if (data) return { error: null, isEexist: true, org_id: data[0].id };\n      else return { error: false, isEexist: false, org_id: null };\n    } catch (e) {\n      console.log(\"findOrg : \", e.message);\n      return { error: true, isEexist: false, org_id: null };\n    }\n  };\n\n  addOrg = async orgData => {\n    try {\n      const orgResponse = await axios.post(\n        `${PIPE_API}/organizations?api_token=${PIPE_TOKEN}`,\n        orgData\n      );\n      const { data } = orgResponse.data;\n      if (!data) throw new PipeError(\"Empty bro\");\n      return data.id;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  getPersonsFromOrg = async org_id => {\n    try {\n      const orgResponse = await axios.get(\n        `${PIPE_API}/organizations/${org_id}/persons?api_token=${PIPE_TOKEN}`\n      );\n\n      const { data } = orgResponse.data;\n      return data;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  getDealsFromOrg = async org_id => {\n    try {\n      const orgResponse = await axios.get(\n        `${PIPE_API}/organizations/${org_id}/deals?api_token=${PIPE_TOKEN}`\n      );\n\n      const { data } = orgResponse.data;\n      if (!data) throw new PipeError(\"Empty bro\");\n      return data;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  addPerson = async personData => {\n    try {\n      const personResponse = await axios.post(\n        `${PIPE_API}/persons?api_token=${PIPE_TOKEN}`,\n        personData\n      );\n\n      const { data } = personResponse.data;\n      if (!data) throw new PipeError(\"fking Empty bro\");\n      return data.id;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  addDeal = async dealData => {\n    try {\n      const dealResponse = await axios.post(\n        `${PIPE_API}/deals?api_token=${PIPE_TOKEN}`,\n        {\n          ...dealData\n        }\n      );\n      const { data } = dealResponse.data;\n      if (!data) throw new PipeError(\"Empty bro\");\n      return data;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  addNote = async noteData => {\n    try {\n      const noteResponse = await axios.post(\n        `${PIPE_API}/notes?api_token=${PIPE_TOKEN}`,\n        noteData\n      );\n      if (!noteResponse) throw new PipeError(\"Empty bro\");\n      return { noteError: false, data: noteResponse };\n    } catch (error) {\n      return { noteError: true, data: null };\n    }\n  };\n\n  addActivity = async activityData => {\n    try {\n      const activityResponse = await axios.post(\n        `${PIPE_API}/activities?api_token=${PIPE_TOKEN}`,\n        activityData\n      );\n      const { success } = await activityResponse.data;\n      if (!success) throw new PipeError(\"fk Empty bro\");\n      return { error: { message: \"Sent Success!\" }, success };\n    } catch (error) {\n      console.log(\"activity error\", error.message);\n      return { error, success: false };\n    }\n  };\n}\n\nexport default PipeApi;\n","import JobsResolver from \"./actionresolvers/jobsResolver\";\nimport PipeResolver from \"./actionresolvers/pipeResolver\";\n\nconst pipeResolver = new PipeResolver();\nconst jobsResolver = new JobsResolver();\n\nconst resolvers = {\n  Query: {\n    getJobs: async (_, { value, source }) =>\n      await jobsResolver.resolve(value, source)\n  },\n  Mutation: {\n    addProspect: async (_, { orgz }) => await pipeResolver.resolve(orgz)\n  }\n};\n\nexport default resolvers;\n","import PipeApi from \"../../pipeapi/api\";\nimport IResolver from \"./IResolver\";\n\nclass PipeResolver extends IResolver {\n  constructor() {\n    super();\n    this.api = new PipeApi();\n  }\n\n  resolve = async orgz => {\n    const api = this.api;\n    const {\n      company,\n      contact,\n      email,\n      phone,\n      address,\n      description,\n      source\n    } = orgz;\n\n    // ---- Orgs stuffs -----\n    let org_id = null;\n    const response = await api.findOrg(company);\n    if (response.error) {\n      return {\n        success: false,\n        error: { message: \"Network/Apollo Problem..\" }\n      };\n    } else {\n      if (response.isEexist) org_id = response.org_id;\n    }\n    if (!org_id) {\n      const orgData = { name: company, address };\n      org_id = await api.addOrg(orgData);\n      if (!org_id)\n        return {\n          success: false,\n          error: { message: `Problem adding ${company}...` }\n        };\n    }\n\n    // ---- Person stuffs -----\n    let person_id = null;\n    const personData = { name: contact, email, phone, org_id };\n    const dataPersons = await api.getPersonsFromOrg(org_id);\n    let aperson = null;\n\n    if (!dataPersons) {\n      person_id = await api.addPerson(personData);\n      if (!person_id)\n        return {\n          success: false,\n          error: { message: `Problem adding ${contact}...` }\n        };\n    } else {\n      aperson = dataPersons.find(p =>\n        p.name.includes(contact.substring(0, 10))\n      );\n\n      if (aperson) {\n        person_id = aperson.id;\n      } else {\n        person_id = await api.addPerson(personData);\n        if (!person_id)\n          return {\n            success: false,\n            error: { message: `Problem adding ${contact}...` }\n          };\n      }\n    }\n\n    // ---- Deals stuffs -----\n\n    const dataDealsOfOrg = await api.getDealsFromOrg(org_id);\n    const LEAD = { [process.env.REACT_APP_PIPE_LEAD]: source };\n    // console.log(\"LEAAD: \", LEAD);\n    const dealData = { title: company, org_id, person_id, ...LEAD };\n    let deal_id = null;\n\n    if (!dataDealsOfOrg) {\n      const dealResp = await api.addDeal(dealData);\n      deal_id = dealResp.id;\n      if (!deal_id)\n        return { success: false, error: { message: \"Problem adding deal..\" } };\n    } else {\n      deal_id = [...dataDealsOfOrg].pop().id;\n    }\n\n    // ---- Notes stuffs -----\n    const noteData = { content: description, deal_id, org_id, person_id };\n    const { noteError } = await api.addNote(noteData);\n    if (noteError)\n      return { success: false, error: { message: `Problem adding Note..` } };\n\n    // ---- Activities stuffs -----\n    const activityData = { subject: \"call\", type: \"call\", deal_id, person_id };\n    const { success, error } = await api.addActivity(activityData);\n    return { success, error };\n  };\n}\n\nexport default PipeResolver;\n","import { ApolloClient } from \"apollo-client\";\nimport { ApolloLink } from \"apollo-link\";\nimport { SchemaLink } from \"apollo-link-schema\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { makeExecutableSchema } from \"graphql-tools\";\nimport { onError } from \"apollo-link-error\";\nimport typeDefs from \"../graphql/typeDefs\";\nimport resolvers from \"../graphql/resolvers\";\n\nexport const initApollo = () => {\n  const schema = makeExecutableSchema({ typeDefs, resolvers });\n  const schemaLink = new SchemaLink({ schema });\n  const cache = new InMemoryCache({\n    addTypename: false\n  });\n  const errorLink = onError(({ graphQLErrors, networkError, operation }) => {\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({ message, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Path: ${path}`)\n      );\n    }\n    if (networkError) {\n      console.log(\n        `[Network error ${operation.operationName}]: ${networkError.message}`\n      );\n    }\n  });\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([errorLink, schemaLink]),\n    cache\n  });\n  return client;\n};\n","const typeDefs = `\n\n  type JobResponse {\n    jobId: String!\n    city: String,\n    jobTitle: String,\n    company: String,\n    area: String,\n    email: [String],\n    address: String,\n    contact:String ,\n    phone: [String] ,\n    companyUrl: String,\n    otherContact: String,\n    description: String,\n    source: String!,\n    pages: Int,\n    message:String!\n  }\n  type AddResponse {\n    success:Boolean\n    error:Error\n  }\n  input AddOrgzInput {\n    company: String\n    contact:String  \n    email: [String] \n    phone: [String]\n    description:String\n    address:String\n    source: String!    \n  }\n\n\n\n  type Error{\n    message:String!\n  }\n  type Query {\n    getJobs(value: String!, source: String!): [JobResponse],\n  }\n\n  type Mutation {\n    addProspect(orgz:AddOrgzInput!): AddResponse,\n  }\n\n  \n`;\n\nexport default typeDefs;\n","import gql from \"graphql-tag\";\n\nexport const JOBS_QUERY = gql`\n  query($value: String!, $source: String!) {\n    getJobs(value: $value, source: $source) {\n      jobId\n      city\n      jobTitle\n      company\n      area\n      email\n      address\n      contact\n      phone\n      companyUrl\n      otherContact\n      description\n      source\n      message\n    }\n  }\n`;\n\nexport const ADD_ORG = gql`\n  mutation($orgz: AddOrgzInput!) {\n    addProspect(orgz: $orgz) {\n      success\n      error {\n        message\n      }\n    }\n  }\n`;\n","export const isExist = (obj, ...keys) => {\n  return keys.reduce((o, k) => (o || {})[k], obj) !== undefined;\n};\n","import { toaster } from \"evergreen-ui\";\n\nexport const showtoaster = (message, duration) => {\n  toaster.warning(message, {\n    id: \"forbidden-action\",\n    duration\n  });\n};\n","import React from \"react\";\nimport { Pane } from \"evergreen-ui\";\n\nconst AddContainer = props => {\n  return (\n    <Pane\n      marginY={10}\n      padding={10}\n      paddingX={40}\n      display=\"grid\"\n      gridGap=\"1rem\"\n      width=\"90%\"\n      border=\"0px\"\n      marginLeft=\"auto\"\n      marginRight=\"auto\"\n      justifyItems=\"center\"\n      justifyContent=\"center\"\n      gridTemplateColumns=\"repeat(auto-fit,400px)\"\n      gridAutoFlow=\"dense\"\n    >\n      {props.children}\n    </Pane>\n  );\n};\n\nexport default AddContainer;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Alert, Spinner, Switch } from \"evergreen-ui\";\nimport { ADD_ORG } from \"../../graphql/queries\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport { showtoaster } from \"../layout/Toaster\";\nimport AddContainer from \"../layout/AddContainer\";\n\nconst AddAll = props => {\n  const [clicked, setClicked] = useState(false);\n  const [notice, setNotice] = useState(\"\");\n\n  const { alljobs } = props;\n\n  useEffect(() => {\n    const total = alljobs.length;\n    console.log(\"in addall: \", total);\n    setNotice(`Total jobs: ${total}`);\n  }, [alljobs]);\n\n  const handleAllClick = async (e, client) => {\n    e.preventDefault();\n    const { alljobs } = props;\n    const total = alljobs.length;\n    if (total <= 0) return showtoaster(\"No job to add bro\", 3);\n\n    setClicked(true);\n    const REQ_RATE_LIMIT = 1500;\n    for (const [ix, job] of await alljobs.entries()) {\n      let {\n        jobId,\n        company,\n        contact,\n        email,\n        phone,\n        address,\n        description,\n        source,\n        message\n      } = job;\n      const orgz = {\n        company,\n        contact,\n        email,\n        phone,\n        address,\n        description,\n        source\n      };\n      setTimeout(async () => {\n        const { data } = await client.mutate({\n          mutation: ADD_ORG,\n          variables: { orgz }\n        });\n        const { error, success } = await data.addProspect;\n        console.log(\"Success: \", success);\n        const { onAdd } = props;\n        let notico = `Total jobs: ${total} - sending ${ix + 1}/${total} Deals `;\n        message = error.message;\n        await onAdd(jobId, message);\n        if (ix === total - 1) {\n          notico = `Total jobs: ${total} - ${ix + 1}/${total} been sent `;\n          setClicked(false);\n        }\n        setNotice(notico);\n      }, REQ_RATE_LIMIT * ix);\n    }\n  };\n\n  const addAll = client => (\n    <Button\n      intent=\"success\"\n      onClick={e => handleAllClick(e, client)}\n      appearance=\"primary\"\n      iconBefore=\"add\"\n      width={100}\n    >\n      Add All\n    </Button>\n  );\n\n  let { checked, onSelChange, source } = props;\n  return (\n    <AddContainer>\n      <Alert\n        intent={clicked ? \"warning\" : \"success\"}\n        title={`${source} : ${notice}`}\n        marginRight=\"4px\"\n        height={40}\n      />\n      <ApolloConsumer>{client => addAll(client)}</ApolloConsumer>\n      <Switch height={30} checked={checked} onChange={onSelChange} />\n      <Spinner marginLeft={8} padding=\"2px\" opacity={clicked ? 1 : 0} />\n    </AddContainer>\n  );\n};\nexport default AddAll;\n","import React from \"react\";\nimport { Pane } from \"evergreen-ui\";\n\nconst SearchLayout = props => {\n  return (\n    <Pane\n      border=\"muted\"\n      marginLeft=\"auto\"\n      marginRight=\"auto\"\n      marginY={10}\n      padding={10}\n      paddingX={40}\n      display=\"grid\"\n      gridGap=\"1rem\"\n      width=\"90%\"\n      justifyItems=\"center\"\n      justifyContent=\"center\"\n      gridTemplateColumns=\"repeat(auto-fit,200px)\"\n      gridAutoFlow=\"dense\"\n    >\n      {props.children}\n    </Pane>\n  );\n};\n\nexport default SearchLayout;\n","import React from \"react\";\nimport { Pane } from \"evergreen-ui\";\n\nconst ContainerLayout = props => {\n  return (\n    <Pane\n      border=\"0px\"\n      marginLeft=\"auto\"\n      marginRight=\"auto\"\n      padding={12}\n      display=\"grid\"\n      gridGap=\"1rem\"\n      gridTemplateColumns=\"1fr\"\n    >\n      {props.children}\n    </Pane>\n  );\n};\n\nexport default ContainerLayout;\n","import React from \"react\";\nimport { Icon, Pane, Pill } from \"evergreen-ui\";\n\nexport const MenuPage = props => {\n  const { prevPage, nextPage, curpage, nbpages } = props;\n\n  return (\n    <Pane display=\"flex\" justifyContent=\"center\" width=\"95%\">\n      <Icon\n        icon=\"chevron-left\"\n        color=\"success\"\n        cursor=\"pointer\"\n        title=\"\"\n        size={40}\n        onClick={prevPage}\n      />\n      <Pill\n        display=\"inline-flex\"\n        margin={12}\n        color=\"green\"\n        isSolid\n      >{`${curpage}/${nbpages}`}</Pill>\n      <Icon\n        icon=\"chevron-right\"\n        color=\"success\"\n        cursor=\"pointer\"\n        size={40}\n        title=\"\"\n        onClick={nextPage}\n      />\n    </Pane>\n  );\n};\n","import React from \"react\";\nimport { Pane } from \"evergreen-ui\";\n\nconst ListLayout = props => {\n  return (\n    <Pane\n      marginY={10}\n      padding={10}\n      paddingX={50}\n      display=\"grid\"\n      gridGap=\"1rem\"\n      width=\"90%\"\n      border=\"0px\"\n      marginLeft=\"auto\"\n      marginRight=\"auto\"\n      justifyItems=\"center\"\n      justifyContent=\"center\"\n      gridTemplateColumns=\"repeat(auto-fit,450px)\"\n      gridAutoFlow=\"dense\"\n    >\n      {props.children}\n    </Pane>\n  );\n};\n\nexport default ListLayout;\n","import React from \"react\";\nimport { Pane } from \"evergreen-ui\";\n\nconst ItemContainer = props => {\n  return (\n    <Pane\n      elevation={2}\n      float=\"left\"\n      width=\"auto\"\n      height=\"auto\"\n      display=\"grid\"\n      alignItems=\"left\"\n      border=\"default\"\n      gridGap=\"1fr\"\n      padding=\"1rem\"\n      margin=\"1rem\"\n    >\n      {props.children}\n    </Pane>\n  );\n};\n\nexport default ItemContainer;\n","import React, { useState, useEffect } from \"react\";\nimport { Text, Pane, Button, Alert, Heading, Spinner } from \"evergreen-ui\";\nimport { ADD_ORG } from \"../../graphql/queries\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport ItemContainer from \"../layout/ItemContainer\";\n\nconst JobItem = props => {\n  const [clicked, setClicked] = useState(false);\n\n  const { job } = props;\n\n  useEffect(() => {\n    const msg = job.message;\n    console.log(\"in Item: \", msg);\n  }, [job, clicked]);\n\n  let {\n    jobId,\n    city,\n    jobTitle,\n    company,\n    area,\n    email,\n    address,\n    contact,\n    phone,\n    companyUrl,\n    otherContact,\n    description,\n    source,\n    message\n  } = job;\n\n  const addProspect = async (e, client) => {\n    e.preventDefault();\n\n    setClicked(true);\n    const orgz = {\n      company,\n      contact,\n      email,\n      phone,\n      address,\n      description,\n      source\n    };\n    const { data } = await client.mutate({\n      mutation: ADD_ORG,\n      variables: { orgz }\n    });\n    const { error, success } = await data.addProspect;\n    console.log(\"Success: \", success);\n    const { onAdd } = props;\n    message = error.message;\n    await onAdd(jobId, message);\n    setClicked(false);\n  };\n\n  const addConsumer = client => {\n    return (\n      <Button\n        intent=\"success\"\n        marginLeft=\"8px\"\n        marginRight=\"8px\"\n        iconBefore=\"add\"\n        appearance=\"primary\"\n        justifyContent=\"center\"\n        height={40}\n        display=\"flex\"\n        onClick={e => addProspect(e, client)}\n      >\n        Add\n      </Button>\n    );\n  };\n\n  return (\n    <ItemContainer>\n      <Heading color=\"dodgerblue\" size={600}>\n        {jobTitle}\n      </Heading>\n      <Heading color=\"dodgerblue\" size={500}>\n        {company}\n      </Heading>\n      <Text> City: {city} </Text>\n      <Text> Area: {area} </Text>\n      <Text> Url : {companyUrl} </Text>\n      <Text> Contact: {contact.substring(0, 60)}...</Text>\n      <Text> Address: {address} </Text>\n      <Text> Email: {email.join(\" \")}</Text>\n      <Text> Phone: {phone.join(\" \")}</Text>\n      <Text> Other Infos: {otherContact.substring(0, 60)}...</Text>\n      <Text> Description: {description.substring(0, 60)}...</Text>\n      <Pane\n        display=\"grid\"\n        gridTemplateColumns=\"2fr 1fr 1fr\"\n        gridGap=\"1em\"\n        marginTop=\"4px\"\n      >\n        <Alert\n          intent={message === \"Sent Success!\" ? \"success\" : \"warning\"}\n          title={message}\n          marginRight=\"4px\"\n          height={40}\n        />\n        <ApolloConsumer>{client => addConsumer(client)}</ApolloConsumer>\n        <Spinner marginLeft={4} padding=\"2px\" opacity={clicked ? 1 : 0} />\n      </Pane>\n    </ItemContainer>\n  );\n};\n\nexport default JobItem;\n","import React from \"react\";\nimport ListLayout from \"../layout/ListLayout\";\nimport JobItem from \"../jobs/JobItem\";\n\nexport const Page = props => {\n  const { onAdd, currentPageJobs } = props;\n\n  return (\n    <ListLayout>\n      {currentPageJobs &&\n        currentPageJobs.map(job => (\n          <JobItem key={job.jobId} job={job} onAdd={onAdd} />\n        ))}\n    </ListLayout>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Pane } from \"evergreen-ui\";\nimport { showtoaster } from \"../layout/Toaster\";\nimport { MenuPage } from \"./MenuPage\";\nimport { Page } from \"./Page\";\n\nexport const Pages = props => {\n  const [page, setPage] = useState(0);\n  const [numPages, setNumPages] = useState(0);\n  const { onAdd, jobs, jpp } = props;\n\n  useEffect(() => {\n    const len = jobs.length;\n    console.log(\"jpp len: \", jpp, len);\n    const r = len % jpp === 0 ? 0 : 1;\n    const np = len > jpp ? ((len / jpp) >> 0) + r : 1;\n    console.log(\"r: \", r);\n    console.log(\"np: \", np);\n    setNumPages(np);\n    setPage(0);\n  }, [jobs, jpp]);\n\n  const nextPage = () => {\n    const tot = (numPages - 1) * jpp;\n    if (page < tot) {\n      setPage(page + jpp);\n    } else {\n      return showtoaster(\"This is The Last Page Bro! \", 3);\n    }\n  };\n\n  const prevPage = () => {\n    if (page - jpp < 0) {\n      return showtoaster(\"You Already at First Page Bro! \", 3);\n    } else {\n      setPage(page - jpp);\n    }\n  };\n\n  const currentPageJobs = jobs.slice(page, page + jpp);\n  const curpage = page / jpp + 1;\n\n  return (\n    <Pane>\n      <MenuPage\n        prevPage={prevPage}\n        nextPage={nextPage}\n        curpage={curpage}\n        nbpages={numPages}\n      />\n      <Page onAdd={onAdd} currentPageJobs={currentPageJobs} />\n    </Pane>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { TextInput, Button, Spinner, Select } from \"evergreen-ui\";\nimport { JOBS_QUERY } from \"../../graphql/queries\";\nimport { isExist } from \"../../utils\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport AddAll from \"./AddAll\";\nimport { showtoaster } from \"../layout/Toaster\";\nimport SearchLayout from \"../layout/SearchLayout\";\nimport ContainerLayout from \"../layout/ContainerLayout\";\nimport { Pages } from \"../pages/Pages\";\n\nconst Jobs = () => {\n  const [value, setValue] = useState(\"\");\n  const [source, setSource] = useState(\"mol\");\n  const [jobppage, setJobpPage] = useState(15);\n  const [checked, setCheked] = useState(false);\n  const [jobs, setJobs] = useState({});\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    console.log(\"source jobs\", source);\n    console.log(\" jobppage\", jobppage);\n  }, [jobs, value, source, clicked, jobppage]);\n\n  const onSelChange = e => {\n    setCheked(e.target.checked);\n  };\n\n  const onAdd = (jobId, message) => {\n    let vjobs = { ...jobs };\n    let jobsArray = vjobs[`${source}`][`${value}`];\n    jobsArray[\n      jobsArray.findIndex(job => job.jobId === jobId)\n    ].message = message;\n    setJobs(vjobs);\n  };\n\n  const onInpChange = e => {\n    const { value } = e.target;\n    setValue(value);\n  };\n\n  const onjppChange = e => {\n    setJobpPage(parseInt(e.target.value, 10));\n  };\n\n  const onSourceChange = e => {\n    setSource(e.target.value);\n  };\n\n  const renderAll = () => {\n    if (isExist(jobs, `${source}`, `${value}`)) {\n      const alljobs = jobs[`${source}`][`${value}`];\n      const addparms = { alljobs, checked, onSelChange, onAdd, source };\n\n      return <AddAll {...addparms} />;\n    } else return null;\n  };\n  const handleClick = async (e, client) => {\n    e.preventDefault();\n    if (!value) return showtoaster(\"Fill something bro! \", 3);\n    setClicked(true);\n    let vjobs = { ...jobs };\n    if (!isExist(vjobs, `${source}`)) vjobs[`${source}`] = {};\n    if (!isExist(vjobs, `${source}`, `${value}`)) {\n      const { data } = await client.query({\n        query: JOBS_QUERY,\n        variables: { value, source }\n      });\n\n      let response = await data.getJobs;\n      vjobs[`${source}`][`${value}`] = response;\n      setJobs(vjobs);\n    }\n    setClicked(false);\n  };\n\n  const jobsConsumer = client => (\n    <Button\n      onClick={e => handleClick(e, client)}\n      appearance=\"primary\"\n      iconBefore=\"search\"\n      width={100}\n      intent=\"success\"\n    >\n      Search\n    </Button>\n  );\n  let currJobs =\n    isExist(jobs, `${source}`, `${value}`) && jobs[`${source}`][`${value}`]\n      ? jobs[`${source}`][`${value}`]\n      : null;\n  return (\n    <ContainerLayout>\n      <SearchLayout>\n        <Select width={100} value={jobppage} onChange={onjppChange}>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n          <option value=\"20\">20</option>\n        </Select>\n        <Select width={100} value={source} onChange={onSourceChange}>\n          <option value=\"mol\">Mol</option>\n          <option value=\"duunitori\">Duuni</option>\n        </Select>\n        <TextInput\n          name=\"search\"\n          placeholder=\"search a job...\"\n          onChange={onInpChange}\n        />\n        <ApolloConsumer>{client => jobsConsumer(client)}</ApolloConsumer>\n        <Spinner marginLeft={8} padding=\"2px\" opacity={clicked ? 1 : 0} />\n      </SearchLayout>\n      {renderAll()}\n      {currJobs && checked ? (\n        <Pages jobs={currJobs} onAdd={onAdd} jpp={jobppage} />\n      ) : null}\n    </ContainerLayout>\n  );\n};\n\nexport default Jobs;\n","import React from \"react\";\nimport { Heading, Pane } from \"evergreen-ui\";\n\nexport const DocContainer = props => {\n  const { title, content } = props;\n  return (\n    <Pane\n      border=\"0\"\n      padding={12}\n      display=\"block\"\n      gridGap=\"1rem\"\n      width=\"95vw\"\n      height=\"80vh\"\n    >\n      <Pane\n        width=\"100%\"\n        height=\"100%\"\n        display=\"grid\"\n        border=\"default\"\n        marginX=\"auto\"\n        marginY=\"12px\"\n        justifyItems=\"center\"\n        justifyContent=\"center\"\n        gridTemplateColumns=\"1fr\"\n        gridTemplateRows=\"1fr 10fr\"\n        gridAutoFlow=\"dense\"\n        gridGap=\"1rem\"\n      >\n        <Heading\n          width=\"100%\"\n          marginX=\"auto\"\n          marginY={16}\n          color=\"dodgerblue\"\n          size={900}\n          textAlign=\"center\"\n        >\n          {title}\n        </Heading>\n        {content}\n      </Pane>\n      {props.children}\n    </Pane>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"evergreen-ui\";\n\nexport const CardContainer = props => {\n  const { rowlay, start } = props;\n  return (\n    <Card\n      color=\"dodgerblue\"\n      width=\"90%\"\n      height=\"95%\"\n      display=\"grid\"\n      border=\"0\"\n      marginX=\"auto\"\n      marginY=\"12px\"\n      justifyItems={start ? \"start\" : \"center\"}\n      justifyContent={start ? \"start\" : \"center\"}\n      gridTemplateColumns=\"1fr\"\n      gridTemplateRows={rowlay}\n      gridAutoFlow=\"dense\"\n      gridGap=\"1rem\"\n    >\n      {props.children}\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { Card, Icon, Heading } from \"evergreen-ui\";\n\nexport const IconParag = props => {\n  const { icon, headcontent } = props;\n  return (\n    <Card display=\"flex\">\n      <Icon marginX=\"auto\" icon={icon} title=\"\" color=\"success\" size={50} />\n      <Heading color=\"dodgerblue\" size={700} marginLeft={16} marginTop={16}>\n        {headcontent}\n      </Heading>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { Pane, Icon } from \"evergreen-ui\";\nimport { DocContainer } from \"./components/layout/DocContainer\";\nimport { CardContainer } from \"./components/layout/CardContainer\";\nimport { IconParag } from \"./components/layout/IconParag\";\n\nexport const Goal = props => {\n  const title = \"Project Goal\";\n  const hcontent = \" Jobs search..\";\n  const lcontent = \" Linking jobs sources to CRM \";\n  const rcontent = \" Automatic adding of deals and Notes to CRM Pipeline\";\n  const ncontent = \" Minimize Time and Effort \";\n  const pcontent =\n    \" sales team concentrate on contacting companies via ready-made contacts!\";\n\n  const { nextPage } = props;\n  const content = (\n    <CardContainer rowlay=\"repeat(auto,1fr)\" start={true}>\n      <IconParag icon=\"search-text\" headcontent={hcontent} />\n      <IconParag icon=\"link\" headcontent={lcontent} />\n      <IconParag icon=\"add-row-top\" headcontent={rcontent} />\n      <IconParag icon=\"time\" headcontent={ncontent} />\n      <IconParag icon=\"phone\" headcontent={pcontent} />\n    </CardContainer>\n  );\n  return (\n    <DocContainer title={title} content={content}>\n      <Pane\n        display=\"flex\"\n        justifyContent=\"center\"\n        justifyItems=\"center\"\n        width=\"95%\"\n        marginX=\"auto\"\n      >\n        <Icon\n          marginX=\"auto\"\n          icon=\"chevron-right\"\n          title=\"\"\n          color=\"success\"\n          cursor=\"pointer\"\n          size={50}\n          onClick={nextPage}\n        />\n      </Pane>\n    </DocContainer>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Pane } from \"evergreen-ui\";\nimport { useMermaid } from \"./useMermaid\";\n\nconst Mermaid = props => {\n  const { id, content } = props;\n  const svg = useMermaid(id, content);\n\n  if (!svg) {\n    return <Pane>Loading...</Pane>;\n  }\n\n  return (\n    <Pane\n      width=\"100%\"\n      height=\"100%\"\n      marginX=\"auto\"\n      display=\"grid\"\n      justifyItems=\"center\"\n      justifyContent=\"center\"\n      gridTemplateColumns=\"1fr\"\n      gridTemplateRows=\"1fr\"\n      dangerouslySetInnerHTML={{ __html: svg }}\n    />\n  );\n};\n\nMermaid.propTypes = {\n  id: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired\n};\n\nexport default Mermaid;\n","import { useState, useEffect } from \"react\";\nimport mermaid from \"mermaid\";\n\nexport const useMermaid = (id, content) => {\n  const [svg, setSvg] = useState(null);\n  mermaid.mermaidAPI.initialize({\n    theme: \"forest\",\n    logLevel: 3,\n    flowchart: { curve: \"linear\" },\n    gantt: { axisFormat: \"%m/%d/%Y\" },\n    sequence: { actorMargin: 20 }\n  });\n\n  useEffect(() => {\n    mermaid.mermaidAPI.render(id, content, svgraph => {\n      setSvg(svgraph);\n    });\n  }, [svg]);\n\n  return svg;\n};\n","import React from \"react\";\nimport { Pane, Icon } from \"evergreen-ui\";\nimport { DocContainer } from \"./components/layout/DocContainer\";\nimport { CardContainer } from \"./components/layout/CardContainer\";\nimport Mermaid from \"./components/Mermaid\";\nimport { archGraph } from \"./Graphs\";\n//pvqxr@mailfs.com abrakadabra\n\nexport const Archi = props => {\n  const title = \" Architecture \";\n  const { prevPage, nextPage } = props;\n  const graph = archGraph;\n  const content = (\n    <CardContainer rowlay=\"1fr\" start={false}>\n      <Mermaid id=\"arch\" content={graph} />\n    </CardContainer>\n  );\n  return (\n    <DocContainer title={title} content={content}>\n      <Pane\n        marginX=\"auto\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        justifyItems=\"center\"\n        width=\"95%\"\n      >\n        <Icon\n          marginReft={8}\n          icon=\"chevron-left\"\n          color=\"success\"\n          cursor=\"pointer\"\n          title=\"\"\n          size={50}\n          onClick={prevPage}\n        />\n        <Icon\n          marginLeft={8}\n          icon=\"chevron-right\"\n          color=\"success\"\n          cursor=\"pointer\"\n          size={50}\n          title=\"\"\n          onClick={nextPage}\n        />\n      </Pane>\n    </DocContainer>\n  );\n};\n","export const archGraph = `\ngraph LR\nA> Jobs Data Sources] == jobs  ==> B{ Client }\nsubgraph APP\nB{ Client } \nend\nB{ Client } == add ==> C[ Pipedrive CRM ]\nC[  Pipedrive CRM  ] == response ==>B{ Client }\n`;\n\nexport const seqDiag = `\nsequenceDiagram\n    App-->>Job Source: fetch jobs\n    Job Source-->>App: Done Bro/Error\n    App-->>CRM: Add Prospect\n    CRM->>CRM: create if not exists \n    CRM-->>App: Added/Created/Error\n    Note right of CRM: Create if not existing\n    App-->>CRM: Add Persons,Deals,Notes...\n    CRM-->>App: Done Bro/Error...\n    Note right of CRM: Added stuffs  \n`;\n\nexport const uml = `classDiagram\nIDataSource <|-- Mol\nIDataSource <|-- Duuni\nIDataSource o-- JobParser\nIDataSource o-- JobError\nDataHandler o-- IDataSource\nIResolver <|-- JobResolver\nIResolver <|-- PipeResolver\nError <|-- PipeError\nError <|-- JobError\nJobResolver o-- DataHandler\nPipeResolver o-- PipeApi\nPipeApi o-- PipeError\nJobs o-- Apollo\nJobItem o-- Apollo\nAddAll o-- Apollo\nApollo o-- IResolver\nIDataSource: url..\nIDataSource: token\nDataHandler: Source\nIResolver : resolve()\nJobResolver : resolve()\nPipeResolver : resolve()\nPipeApi : find()\nPipeApi : addDeals()\nPipeApi : ...\nJobs : search()\nAddAll : addProspect()\nJobParser : parse()\nApollo : init()\nError : message\nPipeError : message\nJobError : message\nMol: getJobs()\nDuuni: getJobs()\nIDataSource: getJobs()`;\n","import React from \"react\";\nimport { Pane, Icon } from \"evergreen-ui\";\nimport { DocContainer } from \"./components/layout/DocContainer\";\nimport { CardContainer } from \"./components/layout/CardContainer\";\nimport Mermaid from \"./components/Mermaid\";\nimport { uml } from \"./Graphs\";\n\nexport const Design = props => {\n  const title = \"Overview of Class diagrams\";\n  const { prevPage } = props;\n  const graph = uml;\n\n  const content = (\n    <CardContainer rowlay=\"1fr\" start={false}>\n      <Mermaid id=\"arch\" content={graph} />\n    </CardContainer>\n  );\n\n  return (\n    <DocContainer title={title} content={content}>\n      <Pane\n        marginX=\"auto\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        justifyItems=\"center\"\n        width=\"95%\"\n      >\n        <Icon\n          marginX=\"auto\"\n          icon=\"chevron-left\"\n          color=\"success\"\n          title=\"\"\n          cursor=\"pointer\"\n          size={50}\n          onClick={prevPage}\n        />\n      </Pane>\n    </DocContainer>\n  );\n};\n","import React from \"react\";\nimport { Pane, Icon } from \"evergreen-ui\";\nimport { DocContainer } from \"./components/layout/DocContainer\";\nimport { CardContainer } from \"./components/layout/CardContainer\";\nimport { IconParag } from \"./components/layout/IconParag\";\n//pvqxr@mailfs.com abrakadabra\n\nexport const Tech = props => {\n  const { prevPage, nextPage } = props;\n  const title = \"Technologies and APIs\";\n  const acontent = \" Reactjs \";\n  const bcontent = \" Apollo / graphQl / Axios \";\n  const dcontent = \" Mol, Duunnitori and Pipedrive APIs \";\n  const content = (\n    <CardContainer rowlay=\"repeat(auto,1fr)\" start={true}>\n      <IconParag icon=\"zoom-to-fit\" headcontent={acontent} />\n      <IconParag icon=\"zoom-to-fit\" headcontent={bcontent} />\n      <IconParag icon=\"zoom-to-fit\" headcontent={dcontent} />\n    </CardContainer>\n  );\n\n  return (\n    <DocContainer title={title} content={content}>\n      <Pane\n        marginX=\"auto\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        justifyItems=\"center\"\n        width=\"95%\"\n      >\n        <Icon\n          marginReft={8}\n          icon=\"chevron-left\"\n          color=\"success\"\n          cursor=\"pointer\"\n          title=\"\"\n          size={50}\n          onClick={prevPage}\n        />\n        <Icon\n          marginLeft={8}\n          icon=\"chevron-right\"\n          color=\"success\"\n          cursor=\"pointer\"\n          size={50}\n          title=\"\"\n          onClick={nextPage}\n        />\n      </Pane>\n    </DocContainer>\n  );\n};\n","import React from \"react\";\nimport { Pane, Icon } from \"evergreen-ui\";\nimport { DocContainer } from \"./components/layout/DocContainer\";\nimport { CardContainer } from \"./components/layout/CardContainer\";\nimport Mermaid from \"./components/Mermaid\";\nimport { seqDiag } from \"./Graphs\";\n//pvqxr@mailfs.com abrakadabra\n\nexport const SeqDiag = props => {\n  const title = \"Sequence Diag \";\n  const { prevPage, nextPage } = props;\n  const graph = seqDiag;\n  const content = (\n    <CardContainer rowlay=\"1fr\" start={false}>\n      <Mermaid id=\"arch\" content={graph} />\n    </CardContainer>\n  );\n  return (\n    <DocContainer title={title} content={content}>\n      <Pane\n        marginX=\"auto\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        justifyItems=\"center\"\n        width=\"95%\"\n      >\n        <Icon\n          marginReft={8}\n          icon=\"chevron-left\"\n          color=\"success\"\n          cursor=\"pointer\"\n          title=\"\"\n          size={50}\n          onClick={prevPage}\n        />\n        <Icon\n          marginLeft={8}\n          icon=\"chevron-right\"\n          color=\"success\"\n          cursor=\"pointer\"\n          size={50}\n          title=\"\"\n          onClick={nextPage}\n        />\n      </Pane>\n    </DocContainer>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Goal } from \"./goal\";\nimport { Archi } from \"./archi\";\nimport { Design } from \"./design\";\nimport { Tech } from \"./tech\";\nimport { SeqDiag } from \"./seqdiag\";\n\nexport const Docs = () => {\n  const [page, setPage] = useState(0);\n  useEffect(() => {\n    console.log(\"page: \", page);\n  }, [page]);\n\n  const nextPage = () => {\n    setPage(page + 1);\n  };\n\n  const prevPage = () => {\n    setPage(page - 1);\n  };\n\n  const Pages = [\n    <Goal nextPage={nextPage} />,\n    <Tech prevPage={prevPage} nextPage={nextPage} />,\n    <Archi prevPage={prevPage} nextPage={nextPage} />,\n    <SeqDiag prevPage={prevPage} nextPage={nextPage} />,\n    <Design prevPage={prevPage} />\n  ];\n\n  return Pages[page];\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Jobs from \"../components/jobs/Jobs\";\nimport { Docs } from \"../docs\";\nimport { Pane, Badge } from \"evergreen-ui\";\n\nconst AppRouter = () => {\n  return (\n    <Router>\n      <Pane width=\"100%\">\n        <Pane display=\"flex\" justifyContent=\"flex-end\" width=\"95%\">\n          <Link to={process.env.PUBLIC_URL + \"/\"}>\n            <Badge color=\"green\" isSolid>\n              home\n            </Badge>\n          </Link>\n          <Link to={process.env.PUBLIC_URL + \"/docs\"}>\n            <Badge color=\"orange\" isSolid>\n              docs\n            </Badge>\n          </Link>\n        </Pane>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + \"/\"} component={Jobs} />\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + \"/docs\"}\n            component={Docs}\n          />\n        </Switch>\n      </Pane>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useState, useEffect } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { initApollo } from \"./apollo/client\";\nimport AppRouter from \"./routes\";\n\nconst App = () => {\n  const [client, setClient] = useState(null);\n\n  const init = async () => {\n    try {\n      const aclient = await initApollo();\n      setClient(aclient);\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    init();\n  }, [client]);\n\n  if (!client) {\n    return \"Setting the client ...\";\n  }\n  return (\n    <ApolloProvider client={client}>\n      <AppRouter />\n    </ApolloProvider>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}